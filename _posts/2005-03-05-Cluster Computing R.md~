
# Introduction
Instead of running an analyses sequentially you can use multiple cores in parallel. In this example I will be using multiple cores on my own computer to construct a cluster.

This type of code can be used for cores on the same node/computer. If you wish to use cores across different computers/nodes then you should look into packages like Rmpi which will help you use a Message Passing Interfaces (MPI) to communicate across nodes.


We will use three wrapper functions that allow us to execute familiar R functions in parallel. These wrapper functions split the work and distribute it to the nodes equally.

We will look at wrappers for parallel implementations of:
* lapply()

* sapply()

* foreach()


## 1. Detecting Cores and Making a Socket Cluster
We can check the number of cores we have to play with like this:

```R
> detectCores()
[1] 8
```

However we do not want to use *all* of our cores or we will crash the system.

```R
# Calculate the number of cores and substract 2
number_cores <- detectCores() - 2
```
Now that we know how many cores we are working with we can construct the cluster using *makeCluster* from the *parallel* package. 
If you have Mac/Unix system use the option FORK (makeFORKcluster) when you construct your cluster. 
Forking only works on Mac/Unix systems but is preffered to the default option PSOCK (makePSOCKcluster).

Forking is preferred because:
  * all environmental variables are included (no manual export to cluster)

  * variables keep the same address (saves memory)

```R
# initiate cluster
my.cluster <- makeCluster(number_cores,type="FORK")
my.cluster
```
```
socket cluster with 6 nodes on host ‘localhost’
```

Remember to close the socket cluster.
```R
# stop cluster and release resources
  stopCluster(my.cluster)
```



## 2. Apply function in parallel to a list or vector
* lapply --> parLapply (returns list ) 

* sapply --> parSapply (returns array)

The function lapply lets us iterate a function over values and returns a list.
```R
b<-100
lapply(1:3, function(x) b+x)
sapply(1:3, function(x) b+x)
```
```
[[1]]
[1] 101

[[2]]
[1] 102

[[3]]
[1] 103

[1] 101 102 103
```
We can apply these functions in parallel/

```R

# cluster will only be able see the variable below if it was Forked. 
# otherwise need to pass it to the cluster
b<-100

# create a cluster using 6 of my computer cores FORK in environmental variables
my.cluster <- makeCluster(number_cores,type="FORK")

# use parralel version of lapply (return list)
my.list<-parLapply(my.cluster, 1:5,function(x) x+b)

#use parallel version of sapply (return array)
my.vector<-parSapply(my.cluster,1:5,function(x) x+b)

# stop cluster and release resources
stopCluster(my.cluster)

print("my.list")
print(my.list)
print("my.vector")
print(my.vector)

```

```
[1] "my.list"
[[1]]
[1] 101

[[2]]
[1] 102

[[3]]
[1] 103

[[4]]
[1] 104

[[5]]
[1] 105

[1] "my.vector"
[1] 101 102 103 104 105

```














